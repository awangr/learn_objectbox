// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entitas/category.dart';
import 'entitas/hutang.dart';
import 'entitas/product.dart';
import 'entitas/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6036254663234711118),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(6, 1955740684574759694),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3251207771874165852),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4326526229907738721),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3339346523631520141),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8329834005480243535),
      name: 'Hutang',
      lastPropertyId: const obx_int.IdUid(7, 8008372421022935981),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4292143544078006008),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7239109886024570717),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6007581031309877116),
            name: 'detail',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1942068129089895739),
            name: 'amount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9106729386484960020),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 575190988390539966),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8008372421022935981),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8725377310297461820),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1435617712803915837),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(2, 8033161068851885485),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7349417629658634120),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8033161068851885485),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5689692896468343575),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(4, 1044063116082444585),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8119142252871668489),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5563314643522097419),
            name: 'productName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7558347521410452746),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1044063116082444585),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 9192322776120183401),
            name: 'categoryOne',
            targetId: const obx_int.IdUid(4, 1435617712803915837))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 5689692896468343575),
      lastIndexId: const obx_int.IdUid(2, 8725377310297461820),
      lastRelationId: const obx_int.IdUid(1, 9192322776120183401),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [5312042491651033773],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        179909254255431242,
        3247647393412553011,
        1955740684574759694,
        6659283205579806390,
        3820092545068995896,
        1544194479393065121,
        7720308237999108320,
        6412771340711082375,
        2969589039624675230,
        6808811515250735179,
        6453114044628032628,
        5767844445341739954,
        4228336344123098789
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = User(
              id: idParam, username: usernameParam, password: passwordParam);

          return object;
        }),
    Hutang: obx_int.EntityDefinition<Hutang>(
        model: _entities[1],
        toOneRelations: (Hutang object) => [object.user],
        toManyRelations: (Hutang object) => {},
        getId: (Hutang object) => object.id,
        setId: (Hutang object, int id) {
          object.id = id;
        },
        objectToFB: (Hutang object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final detailOffset = fbb.writeString(object.detail);
          final amountOffset = fbb.writeString(object.amount);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, detailOffset);
          fbb.addOffset(3, amountOffset);
          fbb.addInt64(4, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(5, categoryOffset);
          fbb.addInt64(6, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final detailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Hutang(
              id: idParam,
              name: nameParam,
              detail: detailParam,
              amount: amountParam,
              date: dateParam,
              category: categoryParam);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.user.attach(store);
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Category(id: idParam, name: nameParam);

          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[3],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) =>
            {obx_int.RelInfo<Product>.toMany(1, object.id): object.categoryOne},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final productNameOffset = fbb.writeString(object.productName);
          final priceOffset = fbb.writeString(object.price);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productNameOffset);
          fbb.addOffset(2, priceOffset);
          fbb.addOffset(3, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final productNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Product(
              id: idParam,
              productName: productNameParam,
              price: priceParam,
              image: imageParam);
          obx_int.InternalToManyAccess.setRelInfo<Product>(object.categoryOne,
              store, obx_int.RelInfo<Product>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.username]
  static final username =
      obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.password]
  static final password =
      obx.QueryStringProperty<User>(_entities[0].properties[2]);
}

/// [Hutang] entity fields to define ObjectBox queries.
class Hutang_ {
  /// see [Hutang.id]
  static final id =
      obx.QueryIntegerProperty<Hutang>(_entities[1].properties[0]);

  /// see [Hutang.name]
  static final name =
      obx.QueryStringProperty<Hutang>(_entities[1].properties[1]);

  /// see [Hutang.detail]
  static final detail =
      obx.QueryStringProperty<Hutang>(_entities[1].properties[2]);

  /// see [Hutang.amount]
  static final amount =
      obx.QueryStringProperty<Hutang>(_entities[1].properties[3]);

  /// see [Hutang.date]
  static final date = obx.QueryDateProperty<Hutang>(_entities[1].properties[4]);

  /// see [Hutang.category]
  static final category =
      obx.QueryStringProperty<Hutang>(_entities[1].properties[5]);

  /// see [Hutang.user]
  static final user =
      obx.QueryRelationToOne<Hutang, User>(_entities[1].properties[6]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// see [Category.name]
  static final name =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id =
      obx.QueryIntegerProperty<Product>(_entities[3].properties[0]);

  /// see [Product.productName]
  static final productName =
      obx.QueryStringProperty<Product>(_entities[3].properties[1]);

  /// see [Product.price]
  static final price =
      obx.QueryStringProperty<Product>(_entities[3].properties[2]);

  /// see [Product.image]
  static final image =
      obx.QueryStringProperty<Product>(_entities[3].properties[3]);

  /// see [Product.categoryOne]
  static final categoryOne =
      obx.QueryRelationToMany<Product, Category>(_entities[3].relations[0]);
}
